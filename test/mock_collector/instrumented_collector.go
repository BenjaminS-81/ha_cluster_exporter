// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ClusterLabs/ha_cluster_exporter/collector (interfaces: FailureProneCollector)

// Package mock_collector is a generated GoMock package.
package mock_collector

import (
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockFailureProneCollector is a mock of FailureProneCollector interface
type MockFailureProneCollector struct {
	ctrl     *gomock.Controller
	recorder *MockFailureProneCollectorMockRecorder
}

// MockFailureProneCollectorMockRecorder is the mock recorder for MockFailureProneCollector
type MockFailureProneCollectorMockRecorder struct {
	mock *MockFailureProneCollector
}

// NewMockFailureProneCollector creates a new mock instance
func NewMockFailureProneCollector(ctrl *gomock.Controller) *MockFailureProneCollector {
	mock := &MockFailureProneCollector{ctrl: ctrl}
	mock.recorder = &MockFailureProneCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFailureProneCollector) EXPECT() *MockFailureProneCollectorMockRecorder {
	return m.recorder
}

// Collect mocks base method
func (m *MockFailureProneCollector) Collect(arg0 chan<- prometheus.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", arg0)
}

// Collect indicates an expected call of Collect
func (mr *MockFailureProneCollectorMockRecorder) Collect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockFailureProneCollector)(nil).Collect), arg0)
}

// CollectWithError mocks base method
func (m *MockFailureProneCollector) CollectWithError(arg0 chan<- prometheus.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectWithError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectWithError indicates an expected call of CollectWithError
func (mr *MockFailureProneCollectorMockRecorder) CollectWithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectWithError", reflect.TypeOf((*MockFailureProneCollector)(nil).CollectWithError), arg0)
}

// Describe mocks base method
func (m *MockFailureProneCollector) Describe(arg0 chan<- *prometheus.Desc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe
func (mr *MockFailureProneCollectorMockRecorder) Describe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockFailureProneCollector)(nil).Describe), arg0)
}

// GetSubsystem mocks base method
func (m *MockFailureProneCollector) GetSubsystem() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubsystem")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubsystem indicates an expected call of GetSubsystem
func (mr *MockFailureProneCollectorMockRecorder) GetSubsystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubsystem", reflect.TypeOf((*MockFailureProneCollector)(nil).GetSubsystem))
}
